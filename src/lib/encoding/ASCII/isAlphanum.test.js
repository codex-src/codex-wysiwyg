import isAlphanum from "./isAlphanum"

test("isAlphanum('')", () => expect(isAlphanum("")).not.toBeTruthy())
test("isAlphanum('a')", () => expect(isAlphanum("a")).toBeTruthy())
test("isAlphanum('A')", () => expect(isAlphanum("A")).toBeTruthy())
test("isAlphanum('b')", () => expect(isAlphanum("b")).toBeTruthy())
test("isAlphanum('B')", () => expect(isAlphanum("B")).toBeTruthy())
test("isAlphanum('c')", () => expect(isAlphanum("c")).toBeTruthy())
test("isAlphanum('C')", () => expect(isAlphanum("C")).toBeTruthy())
test("isAlphanum('d')", () => expect(isAlphanum("d")).toBeTruthy())
test("isAlphanum('D')", () => expect(isAlphanum("D")).toBeTruthy())
test("isAlphanum('e')", () => expect(isAlphanum("e")).toBeTruthy())
test("isAlphanum('E')", () => expect(isAlphanum("E")).toBeTruthy())
test("isAlphanum('f')", () => expect(isAlphanum("f")).toBeTruthy())
test("isAlphanum('F')", () => expect(isAlphanum("F")).toBeTruthy())
test("isAlphanum('g')", () => expect(isAlphanum("g")).toBeTruthy())
test("isAlphanum('G')", () => expect(isAlphanum("G")).toBeTruthy())
test("isAlphanum('h')", () => expect(isAlphanum("h")).toBeTruthy())
test("isAlphanum('H')", () => expect(isAlphanum("H")).toBeTruthy())
test("isAlphanum('i')", () => expect(isAlphanum("i")).toBeTruthy())
test("isAlphanum('I')", () => expect(isAlphanum("I")).toBeTruthy())
test("isAlphanum('j')", () => expect(isAlphanum("j")).toBeTruthy())
test("isAlphanum('J')", () => expect(isAlphanum("J")).toBeTruthy())
test("isAlphanum('k')", () => expect(isAlphanum("k")).toBeTruthy())
test("isAlphanum('K')", () => expect(isAlphanum("K")).toBeTruthy())
test("isAlphanum('l')", () => expect(isAlphanum("l")).toBeTruthy())
test("isAlphanum('L')", () => expect(isAlphanum("L")).toBeTruthy())
test("isAlphanum('m')", () => expect(isAlphanum("m")).toBeTruthy())
test("isAlphanum('M')", () => expect(isAlphanum("M")).toBeTruthy())
test("isAlphanum('n')", () => expect(isAlphanum("n")).toBeTruthy())
test("isAlphanum('N')", () => expect(isAlphanum("N")).toBeTruthy())
test("isAlphanum('o')", () => expect(isAlphanum("o")).toBeTruthy())
test("isAlphanum('O')", () => expect(isAlphanum("O")).toBeTruthy())
test("isAlphanum('p')", () => expect(isAlphanum("p")).toBeTruthy())
test("isAlphanum('P')", () => expect(isAlphanum("P")).toBeTruthy())
test("isAlphanum('q')", () => expect(isAlphanum("q")).toBeTruthy())
test("isAlphanum('Q')", () => expect(isAlphanum("Q")).toBeTruthy())
test("isAlphanum('r')", () => expect(isAlphanum("r")).toBeTruthy())
test("isAlphanum('R')", () => expect(isAlphanum("R")).toBeTruthy())
test("isAlphanum('s')", () => expect(isAlphanum("s")).toBeTruthy())
test("isAlphanum('S')", () => expect(isAlphanum("S")).toBeTruthy())
test("isAlphanum('t')", () => expect(isAlphanum("t")).toBeTruthy())
test("isAlphanum('T')", () => expect(isAlphanum("T")).toBeTruthy())
test("isAlphanum('u')", () => expect(isAlphanum("u")).toBeTruthy())
test("isAlphanum('U')", () => expect(isAlphanum("U")).toBeTruthy())
test("isAlphanum('v')", () => expect(isAlphanum("v")).toBeTruthy())
test("isAlphanum('V')", () => expect(isAlphanum("V")).toBeTruthy())
test("isAlphanum('w')", () => expect(isAlphanum("w")).toBeTruthy())
test("isAlphanum('W')", () => expect(isAlphanum("W")).toBeTruthy())
test("isAlphanum('x')", () => expect(isAlphanum("x")).toBeTruthy())
test("isAlphanum('X')", () => expect(isAlphanum("X")).toBeTruthy())
test("isAlphanum('y')", () => expect(isAlphanum("y")).toBeTruthy())
test("isAlphanum('Y')", () => expect(isAlphanum("Y")).toBeTruthy())
test("isAlphanum('z')", () => expect(isAlphanum("z")).toBeTruthy())
test("isAlphanum('Z')", () => expect(isAlphanum("Z")).toBeTruthy())
test("isAlphanum('0')", () => expect(isAlphanum("0")).toBeTruthy())
test("isAlphanum('1')", () => expect(isAlphanum("1")).toBeTruthy())
test("isAlphanum('2')", () => expect(isAlphanum("2")).toBeTruthy())
test("isAlphanum('3')", () => expect(isAlphanum("3")).toBeTruthy())
test("isAlphanum('4')", () => expect(isAlphanum("4")).toBeTruthy())
test("isAlphanum('5')", () => expect(isAlphanum("5")).toBeTruthy())
test("isAlphanum('6')", () => expect(isAlphanum("6")).toBeTruthy())
test("isAlphanum('7')", () => expect(isAlphanum("7")).toBeTruthy())
test("isAlphanum('8')", () => expect(isAlphanum("8")).toBeTruthy())
test("isAlphanum('9')", () => expect(isAlphanum("9")).toBeTruthy())
test("isAlphanum('_')", () => expect(isAlphanum("_")).toBeTruthy())
