import testAlphanum from "./index"

test("testAlphanum(...)", () => {
	expect(testAlphanum("")).not.toBeTruthy()
	expect(testAlphanum("a")).toBeTruthy()
	expect(testAlphanum("A")).toBeTruthy()
	expect(testAlphanum("b")).toBeTruthy()
	expect(testAlphanum("B")).toBeTruthy()
	expect(testAlphanum("c")).toBeTruthy()
	expect(testAlphanum("C")).toBeTruthy()
	expect(testAlphanum("d")).toBeTruthy()
	expect(testAlphanum("D")).toBeTruthy()
	expect(testAlphanum("e")).toBeTruthy()
	expect(testAlphanum("E")).toBeTruthy()
	expect(testAlphanum("f")).toBeTruthy()
	expect(testAlphanum("F")).toBeTruthy()
	expect(testAlphanum("g")).toBeTruthy()
	expect(testAlphanum("G")).toBeTruthy()
	expect(testAlphanum("h")).toBeTruthy()
	expect(testAlphanum("H")).toBeTruthy()
	expect(testAlphanum("i")).toBeTruthy()
	expect(testAlphanum("I")).toBeTruthy()
	expect(testAlphanum("j")).toBeTruthy()
	expect(testAlphanum("J")).toBeTruthy()
	expect(testAlphanum("k")).toBeTruthy()
	expect(testAlphanum("K")).toBeTruthy()
	expect(testAlphanum("l")).toBeTruthy()
	expect(testAlphanum("L")).toBeTruthy()
	expect(testAlphanum("m")).toBeTruthy()
	expect(testAlphanum("M")).toBeTruthy()
	expect(testAlphanum("n")).toBeTruthy()
	expect(testAlphanum("N")).toBeTruthy()
	expect(testAlphanum("o")).toBeTruthy()
	expect(testAlphanum("O")).toBeTruthy()
	expect(testAlphanum("p")).toBeTruthy()
	expect(testAlphanum("P")).toBeTruthy()
	expect(testAlphanum("q")).toBeTruthy()
	expect(testAlphanum("Q")).toBeTruthy()
	expect(testAlphanum("r")).toBeTruthy()
	expect(testAlphanum("R")).toBeTruthy()
	expect(testAlphanum("s")).toBeTruthy()
	expect(testAlphanum("S")).toBeTruthy()
	expect(testAlphanum("t")).toBeTruthy()
	expect(testAlphanum("T")).toBeTruthy()
	expect(testAlphanum("u")).toBeTruthy()
	expect(testAlphanum("U")).toBeTruthy()
	expect(testAlphanum("v")).toBeTruthy()
	expect(testAlphanum("V")).toBeTruthy()
	expect(testAlphanum("w")).toBeTruthy()
	expect(testAlphanum("W")).toBeTruthy()
	expect(testAlphanum("x")).toBeTruthy()
	expect(testAlphanum("X")).toBeTruthy()
	expect(testAlphanum("y")).toBeTruthy()
	expect(testAlphanum("Y")).toBeTruthy()
	expect(testAlphanum("z")).toBeTruthy()
	expect(testAlphanum("Z")).toBeTruthy()
	expect(testAlphanum("0")).toBeTruthy()
	expect(testAlphanum("1")).toBeTruthy()
	expect(testAlphanum("2")).toBeTruthy()
	expect(testAlphanum("3")).toBeTruthy()
	expect(testAlphanum("4")).toBeTruthy()
	expect(testAlphanum("5")).toBeTruthy()
	expect(testAlphanum("6")).toBeTruthy()
	expect(testAlphanum("7")).toBeTruthy()
	expect(testAlphanum("8")).toBeTruthy()
	expect(testAlphanum("9")).toBeTruthy()
	expect(testAlphanum("_")).toBeTruthy()
})
