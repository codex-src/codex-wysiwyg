import * as Iterators from "./Iterators"

test("rtl-rune", () => {
	expect(Iterators.rtl.rune("")).toBe("")
	expect(Iterators.rtl.rune("\n")).toBe("\n")
	expect(Iterators.rtl.rune("\n\n")).toBe("\n")
	expect(Iterators.rtl.rune("\n\nHello")).toBe("o")
	expect(Iterators.rtl.rune("\n\nHello,")).toBe(",")
	expect(Iterators.rtl.rune("\n\nHello, ")).toBe(" ")
	expect(Iterators.rtl.rune("\n\nHello, world")).toBe("d")
	expect(Iterators.rtl.rune("\n\nHello, world!")).toBe("!")
	expect(Iterators.rtl.rune("\n\nHello, world! ")).toBe(" ")
	expect(Iterators.rtl.rune("\n\nHello, world! ðŸ˜€")).toBe("ðŸ˜€")
	expect(Iterators.rtl.rune("\n\nHello, world! ðŸ˜€\n")).toBe("\n")
	expect(Iterators.rtl.rune("\n\nHello, world! ðŸ˜€\n\n")).toBe("\n")
})

test("rtl-word", () => {
	expect(Iterators.rtl.word("")).toBe("")
	expect(Iterators.rtl.word("\n")).toBe("\n")
	expect(Iterators.rtl.word("\n\n")).toBe("\n")
	expect(Iterators.rtl.word("\n\nHello")).toBe("Hello")
	expect(Iterators.rtl.word("\n\nHello,")).toBe(",")
	expect(Iterators.rtl.word("\n\nHello, ")).toBe(", ")
	expect(Iterators.rtl.word("\n\nHello, world")).toBe("world")
	expect(Iterators.rtl.word("\n\nHello, world!")).toBe("!")
	expect(Iterators.rtl.word("\n\nHello, world! ")).toBe("! ")
	expect(Iterators.rtl.word("\n\nHello, world! ðŸ˜€")).toBe("ðŸ˜€")
	expect(Iterators.rtl.word("\n\nHello, world! ðŸ˜€\n")).toBe("\n")
	expect(Iterators.rtl.word("\n\nHello, world! ðŸ˜€\n\n")).toBe("\n")
})

test("rtl-line", () => {
	expect(Iterators.rtl.line("")).toBe("")
	expect(Iterators.rtl.line("\n")).toBe("\n")
	expect(Iterators.rtl.line("\n\n")).toBe("\n")
	expect(Iterators.rtl.line("\n\nHello")).toBe("Hello")
	expect(Iterators.rtl.line("\n\nHello,")).toBe("Hello,")
	expect(Iterators.rtl.line("\n\nHello, ")).toBe("Hello, ")
	expect(Iterators.rtl.line("\n\nHello, world")).toBe("Hello, world")
	expect(Iterators.rtl.line("\n\nHello, world!")).toBe("Hello, world!")
	expect(Iterators.rtl.line("\n\nHello, world! ")).toBe("Hello, world! ")
	expect(Iterators.rtl.line("\n\nHello, world! ðŸ˜€")).toBe("Hello, world! ðŸ˜€")
	expect(Iterators.rtl.line("\n\nHello, world! ðŸ˜€\n")).toBe("\n")
	expect(Iterators.rtl.line("\n\nHello, world! ðŸ˜€\n\n")).toBe("\n")
})

test("ltr-rune", () => {
	expect(Iterators.ltr.rune("\n\nðŸ˜€ !dlrow ,olleH\n\n")).toBe("\n")
	expect(Iterators.ltr.rune("\nðŸ˜€ !dlrow ,olleH\n\n")).toBe("\n")
	expect(Iterators.ltr.rune("ðŸ˜€ !dlrow ,olleH\n\n")).toBe("ðŸ˜€")
	expect(Iterators.ltr.rune(" !dlrow ,olleH\n\n")).toBe(" ")
	expect(Iterators.ltr.rune("!dlrow ,olleH\n\n")).toBe("!")
	expect(Iterators.ltr.rune("dlrow ,olleH\n\n")).toBe("d")
	expect(Iterators.ltr.rune(" ,olleH\n\n")).toBe(" ")
	expect(Iterators.ltr.rune(",olleH\n\n")).toBe(",")
	expect(Iterators.ltr.rune("olleH\n\n")).toBe("o")
	expect(Iterators.ltr.rune("\n\n")).toBe("\n")
	expect(Iterators.ltr.rune("\n")).toBe("\n")
	expect(Iterators.ltr.rune("")).toBe("")
})

test("ltr-word", () => {
	expect(Iterators.ltr.word("\n\nðŸ˜€ !dlrow ,olleH\n\n")).toBe("\n")
	expect(Iterators.ltr.word("\nðŸ˜€ !dlrow ,olleH\n\n")).toBe("\n")
	expect(Iterators.ltr.word("ðŸ˜€ !dlrow ,olleH\n\n")).toBe("ðŸ˜€")
	expect(Iterators.ltr.word(" !dlrow ,olleH\n\n")).toBe(" !")
	expect(Iterators.ltr.word("!dlrow ,olleH\n\n")).toBe("!")
	expect(Iterators.ltr.word("dlrow ,olleH\n\n")).toBe("dlrow")
	expect(Iterators.ltr.word(" ,olleH\n\n")).toBe(" ,")
	expect(Iterators.ltr.word(",olleH\n\n")).toBe(",")
	expect(Iterators.ltr.word("olleH\n\n")).toBe("olleH")
	expect(Iterators.ltr.word("\n\n")).toBe("\n")
	expect(Iterators.ltr.word("\n")).toBe("\n")
	expect(Iterators.ltr.word("")).toBe("")
})
